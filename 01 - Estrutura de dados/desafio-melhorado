import textwrap
from abc import ABC, abstractmethod
from datetime import datetime

class Cliente:
    def __init__(self, nome, data_nascimento, cpf, endereco):
        self.nome = nome
        self.data_nascimento = data_nascimento
        self._cpf = self.validar_cpf(cpf)
        self.endereco = endereco
    
    @property
    def cpf(self):
        return self._cpf
    
    @staticmethod
    def validar_cpf(cpf):
        # Remove caracteres não numéricos
        cpf = ''.join(filter(str.isdigit, cpf))
        
        if len(cpf) != 11:
            raise ValueError("CPF deve conter 11 dígitos")
        
        return cpf


class Conta:
    contador = 0
    
    def __init__(self, cliente, agencia="0001"):
        Conta.contador += 1
        self._numero = Conta.contador
        self._agencia = agencia
        self._cliente = cliente
        self._saldo = 0
        self._limite = 500
        self._transacoes = []
        self._limite_saques = 3
        self._saques_realizados = 0
        
    @property
    def numero(self):
        return self._numero
    
    @property
    def agencia(self):
        return self._agencia
    
    @property
    def cliente(self):
        return self._cliente
    
    @property
    def saldo(self):
        return self._saldo
    
    @property
    def limite(self):
        return self._limite
    
    @property
    def transacoes(self):
        return self._transacoes.copy()
    
    def depositar(self, valor):
        try:
            valor = float(valor)
            if valor <= 0:
                raise ValueError("O valor precisa ser positivo")
            
            self._saldo += valor
            self._transacoes.append(Transacao(valor, "Depósito"))
            return True, "Depósito realizado com sucesso!"
            
        except ValueError as e:
            return False, f"Operação falhou! {str(e)}"
    
    def sacar(self, valor):
        try:
            valor = float(valor)
            
            if valor <= 0:
                raise ValueError("O valor precisa ser positivo")
                
            if valor > self._saldo:
                raise ValueError("Saldo insuficiente")
                
            if valor > self._limite:
                raise ValueError("O valor do saque excede o limite")
                
            if self._saques_realizados >= self._limite_saques:
                raise ValueError("Número máximo de saques excedido")
            
            self._saldo -= valor
            self._saques_realizados += 1
            self._transacoes.append(Transacao(-valor, "Saque"))
            
            return True, "Saque realizado com sucesso!"
            
        except ValueError as e:
            return False, f"Operação falhou! {str(e)}"
    
    def extrato(self):
        if not self._transacoes:
            return "Não foram realizadas movimentações."
        
        extrato_str = ""
        for transacao in self._transacoes:
            extrato_str += f"{transacao}\n"
            
        return extrato_str


class Transacao:
    def __init__(self, valor, tipo):
        self.valor = valor
        self.tipo = tipo
        self.data = datetime.now()
    
    def __str__(self):
        if self.tipo == "Depósito":
            return f"{self.tipo}:\tR$ {abs(self.valor):.2f}"
        return f"{self.tipo}:\t\tR$ {abs(self.valor):.2f}"


class BancoInterface:
    def __init__(self):
        self.clientes = []
        self.contas = []
    
    def menu(self):
        menu_text = """\n
        ================ MENU ================
        [d]\tDepositar
        [s]\tSacar
        [e]\tExtrato
        [nc]\tNova conta
        [lc]\tListar contas
        [nu]\tNovo usuário
        [q]\tSair
        => """
        return input(textwrap.dedent(menu_text))
    
    def novo_cliente(self):
        try:
            cpf = input("Informe o CPF (somente número): ")
            
            # Verifica se já existe cliente com esse CPF
            if self.buscar_cliente(cpf):
                print("\n@@@ Já existe usuário com esse CPF! @@@")
                return None
            
            nome = input("Informe o nome completo: ")
            if not nome.strip():
                raise ValueError("Nome não pode estar vazio")

            data_nascimento = input("Informe a data de nascimento (dd-mm-aaaa): ")
            # Aqui você poderia adicionar validação de data

            endereco = input("Informe o endereço (logradouro, nro - bairro - cidade/sigla estado): ")
            if not all(x in endereco for x in [',', '-']):
                raise ValueError("Endereço deve seguir o formato especificado")
            
            cliente = Cliente(nome, data_nascimento, cpf, endereco)
            self.clientes.append(cliente)
            
            print("\n=== Usuário criado com sucesso! ===")
            return cliente
            
        except ValueError as e:
            print(f"\n@@@ Erro ao criar usuário: {str(e)} @@@")
            return None
    
    def buscar_cliente(self, cpf):
        cpf = ''.join(filter(str.isdigit, cpf))
        for cliente in self.clientes:
            if cliente.cpf == cpf:
                return cliente
        return None
    
    def nova_conta(self):
        cpf = input("Informe o CPF do usuário: ")
        cliente = self.buscar_cliente(cpf)
        
        if not cliente:
            print("\n@@@ Usuário não encontrado, fluxo de criação de conta encerrado! @@@")
            return None
        
        conta = Conta(cliente)
        self.contas.append(conta)
        print("\n=== Conta criada com sucesso! ===")
        return conta
    
    def listar_contas(self):
        if not self.contas:
            print("\n@@@ Não há contas cadastradas! @@@")
            return
        
        for conta in self.contas:
            linha = f"""\
                Agência:\t{conta.agencia}
                C/C:\t\t{conta.numero}
                Titular:\t{conta.cliente.nome}
            """
            print("=" * 100)
            print(textwrap.dedent(linha))
    
    def obter_conta_cliente(self):
        if not self.contas:
            print("\n@@@ Não há contas cadastradas! @@@")
            return None
        
        # Lista as contas para o usuário selecionar
        for i, conta in enumerate(self.contas, 1):
            print(f"{i}. Conta: {conta.numero} - Titular: {conta.cliente.nome}")
        
        try:
            indice = int(input("\nSelecione o número da conta (1, 2, ...): ")) - 1
            if 0 <= indice < len(self.contas):
                return self.contas[indice]
            else:
                print("\n@@@ Índice inválido! @@@")
                return None
        except ValueError:
            print("\n@@@ Entrada inválida! @@@")
            return None
    
    def depositar(self):
        conta = self.obter_conta_cliente()
        if not conta:
            return
        
        try:
            valor = float(input("Informe o valor do depósito: "))
            sucesso, mensagem = conta.depositar(valor)
            
            if sucesso:
                print(f"\n=== {mensagem} ===")
            else:
                print(f"\n@@@ {mensagem} @@@")
                
        except ValueError:
            print("\n@@@ Valor inválido! @@@")
    
    def sacar(self):
        conta = self.obter_conta_cliente()
        if not conta:
            return
        
        try:
            valor = float(input("Informe o valor do saque: "))
            sucesso, mensagem = conta.sacar(valor)
            
            if sucesso:
                print(f"\n=== {mensagem} ===")
            else:
                print(f"\n@@@ {mensagem} @@@")
                
        except ValueError:
            print("\n@@@ Valor inválido! @@@")
    
    def exibir_extrato(self):
        conta = self.obter_conta_cliente()
        if not conta:
            return
        
        print("\n================ EXTRATO ================")
        print(conta.extrato())
        print(f"\nSaldo:\t\tR$ {conta.saldo:.2f}")
        print("==========================================")
    
    def executar(self):
        while True:
            opcao = self.menu()
            
            if opcao == "d":
                self.depositar()
            
            elif opcao == "s":
                self.sacar()
            
            elif opcao == "e":
                self.exibir_extrato()
            
            elif opcao == "nu":
                self.novo_cliente()
            
            elif opcao == "nc":
                self.nova_conta()
            
            elif opcao == "lc":
                self.listar_contas()
            
            elif opcao == "q":
                print("\n=== Obrigado por utilizar nosso sistema! ===")
                break
            
            else:
                print("\n@@@ Operação inválida, por favor selecione novamente a operação desejada. @@@")


# Inicialização do sistema
if __name__ == "__main__":
    banco = BancoInterface()
    banco.executar()
